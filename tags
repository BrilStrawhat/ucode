!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AP_NAME	pathfinder/Makefile	/^AP_NAME = pathfinder$/;"	m
CFLAGS	libmx/Makefile	/^CFLAGS = -std=c11 -Wall -Wextra -Werror -Wpedantic$/;"	m
CFLAGS	pathfinder/Makefile	/^CFLAGS = -std=c11 -Wall -Wextra -Werror -Wpedantic$/;"	m
FILE_DOES_NOT_EXISTS	pathfinder/inc/pathfinder.h	/^    FILE_DOES_NOT_EXISTS,$/;"	e	enum:e_error
FILE_IS_EMPTY	pathfinder/inc/pathfinder.h	/^    FILE_IS_EMPTY,$/;"	e	enum:e_error
INCF	libmx/Makefile	/^INCF = inc$/;"	m
INCF	pathfinder/Makefile	/^INCF =  inc\/$/;"	m
INVALID_ARGUMENTS_COUNT	pathfinder/inc/pathfinder.h	/^    INVALID_ARGUMENTS_COUNT,$/;"	e	enum:e_error
INVALID_FIRST_LINE	pathfinder/inc/pathfinder.h	/^    INVALID_FIRST_LINE,$/;"	e	enum:e_error
INVALID_ISLANDS_COUNT	pathfinder/inc/pathfinder.h	/^    INVALID_ISLANDS_COUNT$/;"	e	enum:e_error
INVALID_LINE	pathfinder/inc/pathfinder.h	/^    INVALID_LINE,$/;"	e	enum:e_error
LIBMXF	pathfinder/Makefile	/^LIBMXF = ..\/libmx\/inc$/;"	m
LIBMX_H_	libmx/inc/libmx.h	2;"	d
LIB_NAME	libmx/Makefile	/^LIB_NAME = libmx.a$/;"	m
LIB_NAME	pathfinder/Makefile	/^LIB_NAME = libmx.a$/;"	m
OBJ	libmx/Makefile	/^OBJ = \\$/;"	m
OBJ	pathfinder/Makefile	/^OBJ = \\$/;"	m
PATHFINDER_H	pathfinder/inc/pathfinder.h	2;"	d
SRCF	libmx/Makefile	/^SRCF = \\$/;"	m
SRCF	pathfinder/Makefile	/^SRCF = \\$/;"	m
argv_argc_handler	pathfinder/src/main.c	/^static int argv_argc_handler(int argc, char **argv, int *fd) {$/;"	f	file:
arr_malloc	pathfinder/src/main.c	/^static void arr_malloc(char ***adj_matrix, int island_count) {$/;"	f	file:
check_and_read	libmx/src/mx_read_line.c	/^static int check_and_read(char **fd_arr, int fd,$/;"	f	file:
check_first_line	pathfinder/src/main.c	/^static void check_first_line(char *line) {$/;"	f	file:
check_if_valid_line	pathfinder/src/main.c	/^static void check_if_valid_line(char *line, int line_number) {$/;"	f	file:
costil	libmx/src/mx_read_line.c	/^static void costil(char **lineptr) {$/;"	f	file:
data	libmx/inc/libmx.h	/^    void *data;$/;"	m	struct:s_list
data	libmx/test.c	/^    void *data;$/;"	m	struct:s_list	file:
e_error	pathfinder/inc/pathfinder.h	/^typedef enum e_error {$/;"	g
fill_matrix	pathfinder/src/main.c	/^static void fill_matrix(char ***adj_matrix, int island_count, int fd) {$/;"	f	file:
fill_result	libmx/src/mx_read_line.c	/^static void fill_result(int *result, char **str, char delim) {$/;"	f	file:
floyd_formula	pathfinder/src/main.c	/^static void floyd_formula$/;"	f	file:
is_direct_path	pathfinder/src/main.c	/^static bool is_direct_path(char *path) {$/;"	f	file:
is_uniq_island	pathfinder/src/main.c	/^static void is_uniq_island$/;"	f	file:
large	libmx/src/mx_print_unicode.c	/^static void large(int c) {$/;"	f	file:
loop_nut_null	pathfinder/src/main.c	/^static void loop_nut_null(char ***adj_matrix, int island_count) {$/;"	f	file:
main	libmx/fortest.c	/^int main(void) {$/;"	f
main	libmx/test.c	/^int main(void) {$/;"	f
mx_abs	libmx/src/mx_abs.c	/^unsigned int mx_abs(int num) {$/;"	f
mx_atoi	libmx/src/mx_atoi.c	/^int mx_atoi(const char *str) {$/;"	f
mx_binary_search	libmx/src/mx_binary_search.c	/^int mx_binary_search(char** arr, int size, const char *s, int *count) {$/;"	f
mx_bubble_sort	libmx/src/mx_bubble_sort.c	/^int mx_bubble_sort(char **arr, int size) {$/;"	f
mx_count_substr	libmx/src/mx_count_substr.c	/^int mx_count_substr(const char *str, const char *sub) {$/;"	f
mx_count_words	libmx/src/mx_count_words.c	/^int mx_count_words(const char *str, char delimiter) {$/;"	f
mx_create_node	libmx/src/mx_create_node.c	/^t_list *mx_create_node(void *data) {$/;"	f
mx_del_extra_spaces	libmx/src/mx_del_extra_spaces.c	/^char *mx_del_extra_spaces(const char *str) {$/;"	f
mx_del_strarr	libmx/src/mx_del_strarr.c	/^void mx_del_strarr(char ***arr) {$/;"	f
mx_error_handler	pathfinder/src/mx_error_handler.c	/^void mx_error_handler(t_error error, char *filename, char *text) {$/;"	f
mx_file_to_str	libmx/src/mx_file_to_str.c	/^char *mx_file_to_str(const char *file) {$/;"	f
mx_foreach	libmx/src/mx_foreach.c	/^void mx_foreach(const int *arr, int size, void (*f)(int)) {$/;"	f
mx_get_char_index	libmx/src/mx_get_char_index.c	/^int mx_get_char_index(const char* str, char c) {$/;"	f
mx_get_substr_index	libmx/src/mx_get_substr_index.c	/^int mx_get_substr_index(const char *str, const char *sub) {$/;"	f
mx_iarr_rotate	libmx/src/mx_iarr_rotate.c	/^void mx_iarr_rotate(int *arr, int size, int shift) {$/;"	f
mx_isalpha	libmx/src/mx_isalpha.c	/^bool mx_isalpha(int c) {$/;"	f
mx_isdigit	libmx/src/mx_isdigit.c	/^bool mx_isdigit(int c) {$/;"	f
mx_isspace	libmx/src/mx_isspace.c	/^bool mx_isspace(int c) {$/;"	f
mx_itoa	libmx/src/mx_itoa.c	/^char *mx_itoa(int number) {$/;"	f
mx_list_size	libmx/src/mx_list_size.c	/^int mx_list_size(t_list *list) {$/;"	f
mx_memccpy	libmx/src/mx_memccpy.c	/^void *mx_memccpy(void *restrict dst, const void *restrict src,$/;"	f
mx_memchr	libmx/src/mx_memchr.c	/^void *mx_memchr(const void *s, int c, size_t n) {$/;"	f
mx_memcmp	libmx/src/mx_memcmp.c	/^int mx_memcmp(const void *s1, const void *s2, size_t n) {$/;"	f
mx_memcpy	libmx/src/mx_memcpy.c	/^void *mx_memcpy(void *restrict dst, const void *restrict src, size_t n) {$/;"	f
mx_memmem	libmx/src/mx_memmem.c	/^void *mx_memmem(const void *big, size_t big_len,$/;"	f
mx_memmove	libmx/src/mx_memmove.c	/^void *mx_memmove(void *dst, const void *src, size_t len) {$/;"	f
mx_memrchr	libmx/src/mx_memrchr.c	/^void *mx_memrchr(const void *s, int c, size_t n) {$/;"	f
mx_memset	libmx/src/mx_memset.c	/^ void *mx_memset(void *b, int c, size_t len) {$/;"	f
mx_pop_back	libmx/src/mx_pop_back.c	/^void mx_pop_back(t_list **head) {$/;"	f
mx_pop_front	libmx/src/mx_pop_front.c	/^void mx_pop_front(t_list **head) {$/;"	f
mx_pow	libmx/src/mx_pow.c	/^double mx_pow(double n, unsigned int pow) {$/;"	f
mx_print_error	libmx/src/mx_print_error.c	/^void mx_print_error(const char *error) {$/;"	f
mx_print_strarr	libmx/src/mx_print_strarr.c	/^void  mx_print_strarr(char **arr, const char *delim) {$/;"	f
mx_print_unicode	libmx/src/mx_print_unicode.c	/^void mx_print_unicode(wchar_t c) {$/;"	f
mx_printchar	libmx/src/mx_printchar.c	/^void mx_printchar(char c) {$/;"	f
mx_printint	libmx/src/mx_printint.c	/^void mx_printint(int n) {$/;"	f
mx_printstr	libmx/src/mx_printstr.c	/^void mx_printstr(const char *s) {$/;"	f
mx_push_back	libmx/src/mx_push_back.c	/^void mx_push_back(t_list **list, void *data) {$/;"	f
mx_push_front	libmx/src/mx_push_front.c	/^void mx_push_front(t_list **list, void *data)$/;"	f
mx_read_line	libmx/src/mx_read_line.c	/^int mx_read_line(char **lineptr, size_t buf_size, char delim, const int fd) {$/;"	f
mx_replace_substr	libmx/src/mx_replace_substr.c	/^char *mx_replace_substr(const char *str, const char *sub,const char *replace) {$/;"	f
mx_set_arr_null	pathfinder/src/mx_str_set_arr_null.c	/^void mx_set_arr_null(int size_row, int size_col,$/;"	f
mx_shift_str	libmx/src/mx_shift_str.c	/^void mx_shift_str(char *str, int shift) {$/;"	f
mx_sqrt	libmx/src/mx_sqrt.c	/^int mx_sqrt(int x) {$/;"	f
mx_str_reverse	libmx/src/mx_str_reverse.c	/^void mx_str_reverse(char *s) {$/;"	f
mx_str_until_char_dup	libmx/src/mx_str_until_char_dup.c	/^char *mx_str_until_char_dup(const char *s1, char  c) {$/;"	f
mx_strcat	libmx/src/mx_strcat.c	/^char *mx_strcat(char *restrict s1, const char *restrict s2) {$/;"	f
mx_strcat_until_char	libmx/src/mx_strcat_until_char.c	/^char *mx_strcat_until_char(char *s1, const char *s2, char delim) {$/;"	f
mx_strcmp	libmx/src/mx_strcmp.c	/^int mx_strcmp(const char *s1, const char *s2) {$/;"	f
mx_strcpy	libmx/src/mx_strcpy.c	/^char *mx_strcpy(char *dst, const char *src) {$/;"	f
mx_strcpy_until_char	libmx/src/mx_strcpy_until_char.c	/^char *mx_strcpy_until_char(char *dst, const char *src, char delim) {$/;"	f
mx_strdel	libmx/src/mx_strdel.c	/^void mx_strdel(char **str) {$/;"	f
mx_strdup	libmx/src/mx_strdup.c	/^char *mx_strdup(const char *str) {$/;"	f
mx_strdup_until_char	libmx/src/mx_strdup_until_char.c	/^char *mx_strdup_until_char(const char *s1, char  delim) {$/;"	f
mx_strjoin	libmx/src/mx_strjoin.c	/^char *mx_strjoin(const char *s1, const char *s2) {$/;"	f
mx_strjoin_until_char	libmx/src/mx_strjoin_until_char.c	/^char *mx_strjoin_until_char(char **s1, const char *s2, char delim) {$/;"	f
mx_strlen	libmx/src/mx_strlen.c	/^int mx_strlen(const char *s) {$/;"	f
mx_strncpy	libmx/src/mx_strncpy.c	/^char *mx_strncpy(char *dst, const char *src, int len) {$/;"	f
mx_strndup	libmx/src/mx_strndup.c	/^char *mx_strndup(const char *s1, size_t n) {$/;"	f
mx_strnew	libmx/src/mx_strnew.c	/^char *mx_strnew(const int size) {$/;"	f
mx_strnreplace	libmx/src/mx_strnreplace.c	/^char *mx_strnreplace(char *dst, const char *src, int len) {$/;"	f
mx_strsplit	libmx/src/mx_strsplit.c	/^char **mx_strsplit(const char *s, char c) {$/;"	f
mx_strstr	libmx/src/mx_strstr.c	/^char *mx_strstr(const char *haystack, const char *needle) {$/;"	f
mx_strtrim	libmx/src/mx_strtrim.c	/^char *mx_strtrim(const char *str) {$/;"	f
mx_strtrim_char	libmx/src/mx_strtrim_char.c	/^char *mx_strtrim_char(const char *str, char c) {$/;"	f
mx_swap_char	libmx/src/mx_swap_char.c	/^void mx_swap_char(char *s1, char *s2) {$/;"	f
mx_three_to_one	pathfinder/src/mx_three_to_one.c	/^void mx_three_to_one(char *first_part, char *text, char *second_part) {$/;"	f
next	libmx/inc/libmx.h	/^    struct s_list *next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	libmx/test.c	/^    struct s_list *next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list	file:
not_large_but_not_small	libmx/src/mx_print_unicode.c	/^static void not_large_but_not_small(int c) {$/;"	f	file:
parse_line	pathfinder/src/main.c	/^static void parse_line(char ***adj_matrix, char *line, int island_count) {$/;"	f	file:
print	libmx/src/mx_print_unicode.c	/^static void print(int b1, int b2, int b3, int b4) {$/;"	f	file:
s_list	libmx/inc/libmx.h	/^typedef struct s_list {$/;"	s
s_list	libmx/test.c	/^typedef struct s_list {$/;"	s	file:
set_distance	pathfinder/src/main.c	/^static void set_distance$/;"	f	file:
t_error	pathfinder/inc/pathfinder.h	/^} t_error;$/;"	t	typeref:enum:e_error
t_list	libmx/inc/libmx.h	/^}   t_list;$/;"	t	typeref:struct:s_list
t_list	libmx/test.c	/^}   t_list;$/;"	t	typeref:struct:s_list	file:
